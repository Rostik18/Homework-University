{"ast":null,"code":"import * as Highcharts from 'highcharts';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"highcharts-angular\";\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor() {\n      this.Highcharts = Highcharts;\n      this.updateFlag = false;\n      this.tmin = 0;\n      this.tmax = 3;\n      this.step = 0.01;\n      this.randFunc = {\n        title: {\n          text: \"xi(t) = eta * e^-3t + t^2\"\n        },\n        //time: { timezoneOffset: new Date().getTimezoneOffset() },\n        xAxis: {\n          type: 'linear'\n        },\n        series: []\n      };\n      this.executExperements();\n    }\n\n    executExperements() {\n      this.updateFlag = false;\n      this.randFunc.series = [];\n      this.randFunc.series.push(this.calcExpectation());\n      this.randFunc.series.push(this.calcUpperLimit());\n      this.randFunc.series.push(this.calcLowerLimit());\n\n      for (let i = 0; i < 10; i++) {\n        const experement = {\n          name: `experement ${i}`,\n          type: 'line',\n          data: []\n        };\n        const eta = this.eta();\n\n        for (let t = this.tmin; t < this.tmax; t += this.step) {\n          experement.data.push({\n            x: t,\n            y: this.rundomFunc(eta, t)\n          });\n        }\n\n        this.randFunc.series.push(experement);\n      }\n\n      this.updateFlag = true;\n    }\n\n    calcUpperLimit() {\n      const upperLimit = {\n        name: `upper limit`,\n        type: 'line',\n        data: []\n      };\n\n      for (let t = this.tmin; t < this.tmax; t += this.step) {\n        upperLimit.data.push({\n          x: t,\n          y: this.mathExpectationFunc(t) + 3 * this.sigmaFunc(t)\n        });\n      }\n\n      return upperLimit;\n    }\n\n    calcLowerLimit() {\n      const lowerLimit = {\n        name: `lower limit`,\n        type: 'line',\n        data: []\n      };\n\n      for (let t = this.tmin; t < this.tmax; t += this.step) {\n        lowerLimit.data.push({\n          x: t,\n          y: this.mathExpectationFunc(t) - 3 * this.sigmaFunc(t)\n        });\n      }\n\n      return lowerLimit;\n    }\n\n    calcExpectation() {\n      const experement = {\n        name: `math expectation`,\n        type: 'line',\n        data: []\n      };\n\n      for (let t = this.tmin; t < this.tmax; t += this.step) {\n        experement.data.push({\n          x: t,\n          y: this.mathExpectationFunc(t)\n        });\n      }\n\n      return experement;\n    } // xi(t) = sqrt(9 * (e^-3t)^2)\n\n\n    sigmaFunc(t) {\n      return Math.sqrt(this.deviationFunc(t));\n    } // xi(t) = 3 * (e^-3t)^2\n\n\n    deviationFunc(t) {\n      return 3 * Math.pow(Math.pow(Math.E, -3 * t), 2);\n    } // xi(t) = 5 * e^-3t + t^2\n\n\n    mathExpectationFunc(t) {\n      return 5 * Math.pow(Math.E, -3 * t) + t * t;\n    } // xi(t) = eta * e^-3t + t^2\n\n\n    rundomFunc(eta, t) {\n      return eta * Math.pow(Math.E, -3 * t) + t * t;\n    } // N(5, 9) // deviation = 9\n\n\n    eta() {\n      const mean = 5;\n      const stdDev = 9;\n      const u1 = 1.0 - Math.random(); //uniform(0,1] random doubles\n\n      const u2 = 1.0 - Math.random();\n      const randStdNormal = Math.sqrt(-2.0 * Math.log(u1)) * Math.sin(2.0 * Math.PI * u2); //random normal(0,1)\n\n      return mean + stdDev * randStdNormal; //random normal(mean,stdDev^2)\n    }\n\n  }\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)();\n  };\n\n  ChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"chart-app\"]],\n    decls: 8,\n    vars: 5,\n    consts: [[3, \"click\"], [\"matInput\", \"\", \"type\", \"number\", 3, \"ngModel\", \"ngModelChange\"], [2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\", \"update\", \"updateChange\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"button\", 0);\n        i0.ɵɵlistener(\"click\", function ChartComponent_Template_button_click_0_listener() {\n          return ctx.executExperements();\n        });\n        i0.ɵɵtext(1, \"\\u0412\\u0438\\u043A\\u043E\\u043D\\u0430\\u0442\\u0438 \\u0435\\u043A\\u0441\\u043F\\u0435\\u0440\\u0435\\u043C\\u0435\\u043D\\u0442\\u0438\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(2, \"\\nt min: \");\n        i0.ɵɵelementStart(3, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ChartComponent_Template_input_ngModelChange_3_listener($event) {\n          return ctx.tmin = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵtext(4, \"\\nt max: \");\n        i0.ɵɵelementStart(5, \"input\", 1);\n        i0.ɵɵlistener(\"ngModelChange\", function ChartComponent_Template_input_ngModelChange_5_listener($event) {\n          return ctx.tmax = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(6, \"highcharts-chart\", 2);\n        i0.ɵɵlistener(\"updateChange\", function ChartComponent_Template_highcharts_chart_updateChange_6_listener($event) {\n          return ctx.updateFlag = $event;\n        });\n        i0.ɵɵelementEnd();\n        i0.ɵɵelement(7, \"br\");\n      }\n\n      if (rf & 2) {\n        i0.ɵɵadvance(3);\n        i0.ɵɵproperty(\"ngModel\", ctx.tmin);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngModel\", ctx.tmax);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.randFunc)(\"update\", ctx.updateFlag);\n      }\n    },\n    directives: [i1.NumberValueAccessor, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgModel, i2.HighchartsChartComponent],\n    styles: [\"\"]\n  });\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}