{"ast":null,"code":"import * as Highcharts from 'highcharts';\nimport { manpower } from '../data/manpower.data';\nimport { tanks } from '../data/tanks.data';\nimport { ifv } from '../data/ifv.data';\nimport { artillerySystems } from '../data/artillerySystems.data';\nimport { reactiveVolleyFireSystems } from '../data/reactiveVolleyFireSystems.data';\nimport { airDefense } from '../data/airDefense.data';\nimport { aircrafts } from '../data/aircrafts.data';\nimport { helicopters } from '../data/helicopters.data';\nimport { unmannedAerialVehicle } from '../data/unmannedAerialVehicle.data';\nimport { Statistics } from '../services/statistics.methods';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"highcharts-angular\";\nimport * as i2 from \"@angular/common\";\n\nfunction ChartComponent_table_4_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"table\")(1, \"tr\");\n    i0.ɵɵelement(2, \"th\");\n    i0.ɵɵelementStart(3, \"th\");\n    i0.ɵɵtext(4, \"Mean\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(5, \"th\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(6, \"tr\")(7, \"td\");\n    i0.ɵɵtext(8, \"manpower\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(9, \"td\");\n    i0.ɵɵtext(10);\n    i0.ɵɵpipe(11, \"number\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelement(12, \"td\");\n    i0.ɵɵelementEnd();\n    i0.ɵɵelementStart(13, \"tr\");\n    i0.ɵɵelement(14, \"td\")(15, \"td\")(16, \"td\");\n    i0.ɵɵelementEnd()();\n  }\n\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(10);\n    i0.ɵɵtextInterpolate(i0.ɵɵpipeBind2(11, 1, ctx_r0.manpowerMean, \"1.2-2\"));\n  }\n}\n\nexport let ChartComponent = /*#__PURE__*/(() => {\n  class ChartComponent {\n    constructor() {\n      this.Highcharts = Highcharts;\n      this.manpowerMean = Statistics.mean(manpower.data);\n      this.perDayChartOptions = {\n        title: {\n          text: \"per each day\"\n        },\n        time: {\n          timezoneOffset: new Date().getTimezoneOffset()\n        },\n        xAxis: {\n          type: 'datetime'\n        },\n        series: [manpower, tanks, ifv, artillerySystems, reactiveVolleyFireSystems, airDefense, aircrafts, helicopters, unmannedAerialVehicle]\n      };\n      this.totalChartOptions = {\n        title: {\n          text: \"total for each day\"\n        },\n        time: {\n          timezoneOffset: new Date().getTimezoneOffset()\n        },\n        xAxis: {\n          type: 'datetime'\n        },\n        series: [this.createTotalsSeries(manpower), this.createTotalsSeries(tanks), this.createTotalsSeries(ifv), this.createTotalsSeries(artillerySystems), this.createTotalsSeries(reactiveVolleyFireSystems), this.createTotalsSeries(airDefense), this.createTotalsSeries(aircrafts), this.createTotalsSeries(helicopters), this.createTotalsSeries(unmannedAerialVehicle)]\n      };\n      this.timeSeriesChartOptions = {\n        title: {\n          text: \"time series\"\n        },\n        time: {\n          timezoneOffset: new Date().getTimezoneOffset()\n        },\n        xAxis: {\n          type: 'datetime'\n        },\n        series: [manpower, this.createMeanSeries(manpower), this.createExponentialSmoothingSeries(manpower, 0.3), this.createTotalsSeries(this.createExponentialSmoothingSeries(manpower, 0.3)) // tanks,\n        // this.createMeanSeries(tanks),\n        // this.createExponentialSmoothingSeries(tanks, 0.3),\n        // this.createTotalsSeries(this.createExponentialSmoothingSeries(tanks, 0.3)),\n        ]\n      };\n    }\n\n    createTotalsSeries(series) {\n      const total = [series.data[0]];\n      series.data.forEach(element => {\n        total.push({\n          x: element.x,\n          y: total[total.length - 1].y + element.y\n        });\n      });\n      return {\n        name: series.name,\n        type: 'line',\n        data: total\n      };\n    }\n\n    createMeanSeries(series) {\n      const mean = Math.round(Statistics.mean(series.data) * 100) / 100;\n      const meanSeries = [];\n      series.data.forEach(element => {\n        meanSeries.push({\n          x: element.x,\n          y: mean\n        });\n      });\n      return {\n        name: `${series.name} mean`,\n        type: 'line',\n        data: meanSeries\n      };\n    } // where alpha is the smoothing factor, and 0 < alpha < 1.\n\n\n    createExponentialSmoothingSeries(series, alfa = 0.05) {\n      const smoothSeries = [series.data[0]];\n\n      for (let t = 1; t < series.data.length; t++) {\n        smoothSeries.push({\n          x: series.data[t].x,\n          y: alfa * series.data[t].y + (1 - alfa) * smoothSeries[t - 1].y\n        });\n      }\n\n      return {\n        name: `${series.name} smooth ${alfa}`,\n        type: 'line',\n        data: smoothSeries\n      };\n    }\n\n  }\n\n  ChartComponent.ɵfac = function ChartComponent_Factory(t) {\n    return new (t || ChartComponent)();\n  };\n\n  ChartComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartComponent,\n    selectors: [[\"chart-app\"]],\n    decls: 6,\n    vars: 7,\n    consts: [[2, \"width\", \"100%\", \"height\", \"400px\", \"display\", \"block\", 3, \"Highcharts\", \"options\"], [4, \"ngIf\"]],\n    template: function ChartComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelement(0, \"highcharts-chart\", 0)(1, \"br\")(2, \"highcharts-chart\", 0)(3, \"br\");\n        i0.ɵɵtemplate(4, ChartComponent_table_4_Template, 17, 4, \"table\", 1);\n        i0.ɵɵelement(5, \"highcharts-chart\", 0);\n      }\n\n      if (rf & 2) {\n        i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.perDayChartOptions);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.totalChartOptions);\n        i0.ɵɵadvance(2);\n        i0.ɵɵproperty(\"ngIf\", false);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"Highcharts\", ctx.Highcharts)(\"options\", ctx.timeSeriesChartOptions);\n      }\n    },\n    directives: [i1.HighchartsChartComponent, i2.NgIf],\n    pipes: [i2.DecimalPipe],\n    styles: [\"\"]\n  });\n  return ChartComponent;\n})();","map":null,"metadata":{},"sourceType":"module"}